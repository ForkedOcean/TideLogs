version: '3.8'

services:
  postgres:
    extends:
      file: docker-compose.yml
      service: postgres
    ports:
      - "${DEV_DB_PORT:-5432}:5432"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${DEV_BACKEND_PORT:-8080}:8080"
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      RUST_LOG: debug
      SQLX_OFFLINE: true
    volumes:
      - ./backend:/app:delegated
      - backend_target:/app/target
      - backend_cargo:/usr/local/cargo/registry
    command: cargo watch -x run
    networks:
      - tidelogs-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    depends_on:
      - backend
    ports:
      - "${DEV_FRONTEND_PORT:-3000}:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:${DEV_BACKEND_PORT:-8080}
    volumes:
      - ./frontend:/app:delegated
      - /app/node_modules
      - /app/.next
    command: npm run dev
    networks:
      - tidelogs-network

volumes:
  postgres_data:
  backend_target:
  backend_cargo:

networks:
  tidelogs-network:
    driver: bridge